[project]
name = "cue-backend"
version = "0.0.1"
description = "Cue backend"
authors = [{ name = "Cue", email = "hello@example.com" }]
readme = "README.md"
requires-python = ">=3.10"

dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "gunicorn>=23.0.0",
    "sqlalchemy>=2.0.30",
    "psycopg2-binary>=2.9.9",
    "asyncpg==0.29.0",
    "greenlet>=3.1.1",
    "alembic>=1.13.3",
    "python-dotenv>=1.0.0",
    "pydantic>=2.8.0",
    "pydantic-settings>=2.4.0",
    "numpy>=2.1.0",
    "openai==1.52.0",
    "bcrypt==4.0.1",
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
]

[project.optional-dependencies]
dev = [
    "pyright>=1.1.370",
    "mypy>=1.1.1",
    "ruff>=0.5.0",
    "pytest",
    "pytest-asyncio>=0.24.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--tb=short"
xfail_strict = true
asyncio_mode = "auto"
filterwarnings = ["error"]

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
line-length = 120
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "I",  # isort
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B006",  # mutable defaults
    "B904",  # Allow raising exceptions without from e, for HTTPException
    "B024",  # Allow an abstract base class has no abstract methods
    "UP007", # Ignore use of `X | Y` for type annotations
    "UP006", # Ignore use of Dict
    "UP035", # Ignore use of Dict or List
    "UP038", # Ignore (X, Y)
    "UP045", # disable `X | None`
]

[tool.ruff.lint.isort]
length-sort = true
length-sort-straight = true
combine-as-imports = true
extra-standard-library = ["typing_extensions"]

[tool.ruff.format]
docstring-code-format = true
